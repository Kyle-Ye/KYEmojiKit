//
//  EmojiTipView.swift
//
//
//  Created by Kyle on 2024/8/2.
//

import SwiftUI
import SDWebImageSwiftUI

struct EmojiTipView: View {
    var emoji: Emoji
    
    var body: some View {
        VStack(spacing: 4) {
            WebImage(url: emoji.value) { image in
                image
                    .resizable()
                    .aspectRatio(contentMode: .fit)
            } placeholder: {
                Color.clear
            }
            .frame(width: 48, height: 48)
            Text(emoji.key)
                .font(.caption)
                .foregroundColor(.white)
        }
        .padding(12)
        .background(Color.gray)
        .clipShape(RoundedTipShape(cornerRadius: 8, tipRatio: 0.5))
    }
}

fileprivate struct RoundedTipShape: Shape {
    /// The radii of each corner of the rounded rectangle.
    var cornerRadius: Double
    
    // The current direction is bottom
    var tipRatio: Double
    
    /// Describes this shape as a path within a rectangular frame of reference.
    ///
    /// - Parameter rect: The frame of reference for describing this shape.
    ///
    /// - Returns: A path that describes this shape.
    func path(in rect: CGRect) -> Path {
        var path = Path()
        let width = rect.width
        let height = rect.height
        let tl = cornerRadius
        let tr = cornerRadius
        let bl = cornerRadius
        let br = cornerRadius
        
        let tipHeight = 6.0
        let tipWidth = 18.0
        let leadingX = rect.origin.x
        let trailingX = rect.origin.x + width
        let centerX = rect.origin.x + width / 2
        let topY = rect.origin.y
        let bottomY = rect.origin.y + height - tipHeight
        
        let tipRect = CGRect(x: centerX - tipWidth / 2, y: bottomY, width: tipWidth, height: tipHeight)
        let tipPath = tipPath(in: tipRect)
        path.addPath(tipPath)
        
        path.move(to: CGPoint(x: leadingX + tl, y: topY))
        path.addLine(to: CGPoint(x: trailingX - tr, y: topY))
        path.addArc(
            center: CGPoint(x: trailingX - tr, y: topY + tr),
            radius: tr,
            startAngle: Angle(degrees: 270),
            endAngle: Angle(degrees: 360), clockwise: false
        )
        path.addLine(to: CGPoint(x: trailingX, y: bottomY - br))
        path.addArc(
            center: CGPoint(x: trailingX - br, y: bottomY - br),
            radius: br,
            startAngle: Angle(degrees: 0),
            endAngle: Angle(degrees: 90),
            clockwise: false
        )
        path.addLine(to: CGPoint(x: rect.origin.x + bl, y: bottomY))
        path.addArc(
            center: CGPoint(x: leadingX + bl, y: bottomY - bl),
            radius: bl,
            startAngle: Angle(degrees: 90),
            endAngle: Angle(degrees: 180),
            clockwise: false
        )
        path.addLine(to: CGPoint(x: leadingX, y: topY + tl))
        path.addArc(
            center: CGPoint(x: leadingX + tl, y: topY + tl),
            radius: tl,
            startAngle: Angle(degrees: 180),
            endAngle: Angle(degrees: 270),
            clockwise: false
        )
        path.closeSubpath()
        
        return path
    }
    
    // Generated by https://svg-to-swiftui.quassum.com/
    private func tipPath(in rect: CGRect) -> Path {
        var path = Path()
        let width = rect.size.width
        let height = rect.size.height
        let originX = rect.origin.x
        let originY = rect.origin.y
        path.move(to: CGPoint(
            x: originX + 0.80178 * width,
            y: originY + 0.19526 * height
        ))
        path.addLine(to: CGPoint(
            x: originX + 0.58839 * width,
            y: originY + 0.7643 * height
        ))
        path.addCurve(
            to: CGPoint(x: originX + 0.41161 * width, y: originY + 0.7643 * height),
            control1: CGPoint(x: originX + 0.53957 * width, y: originY + 0.89447 * height),
            control2: CGPoint(x: originX + 0.46043 * width, y: originY + 0.89447 * height)
        )
        path.addLine(to: CGPoint(
            x: originX + 0.19822 * width,
            y: originY + 0.19526 * height
        ))
        path.addCurve(
            to: CGPoint(x: originX + 0.02145 * width, y: originY),
            control1: CGPoint(x: originX + 0.15134 * width, y: originY + 0.07024 * height),
            control2: CGPoint(x: originX + 0.08775 * width, y: originY)
        )
        path.addLine(to: CGPoint(x: originX + 0.97856 * width, y: originY))
        path.addCurve(
            to: CGPoint(x: originX + 0.80178 * width, y: originY + 0.19526 * height),
            control1: CGPoint(x: originX + 0.91225 * width, y: originY),
            control2: CGPoint(x: originX + 0.84866 * width, y: originY + 0.07024 * height)
            )
        path.closeSubpath()
        return path
    }
}

#if DEBUG

#Preview {
    VStack {
        EmojiTipView(emoji: .init(
            key: "A",
            value: URL(string: "https://picsum.photos/200")!
        ))
    }
    .background(Color.gray)
    .scaleEffect(5)
}
#endif
